Program
  .decls:
    VarDecl
      name=PI
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=314
      kind=const
    VarDecl
      name=greeting
      .type:
        SimpleType
          name=string
      .init:
        LiteralString
          value=Hello, Compiscript!
      kind=let
    VarDecl
      name=flag
      .type:
        SimpleType
          name=boolean
      init=None
      kind=let
    VarDecl
      name=numbers
      type=None
      .init:
        ArrayLiteral
          .elems:
            LiteralInt
              value=1
            LiteralInt
              value=2
            LiteralInt
              value=3
            LiteralInt
              value=4
            LiteralInt
              value=5
      kind=let
    VarDecl
      name=matrix
      type=None
      .init:
        ArrayLiteral
          .elems:
            ArrayLiteral
              .elems:
                LiteralInt
                  value=1
                LiteralInt
                  value=2
            ArrayLiteral
              .elems:
                LiteralInt
                  value=3
                LiteralInt
                  value=4
      kind=let
    FunctionDecl
      name=makeAdder
      .params:
        Param
          name=x
          .type:
            SimpleType
              name=integer
      .ret:
        SimpleType
          name=integer
      .body:
        Block
          .stmts:
            Return
              .expr:
                Binary
                  op=+
                  .left:
                    Name
                      name=x
                  .right:
                    LiteralInt
                      value=1
      is_method=False
      is_constructor=False
    VarDecl
      name=addFive
      .type:
        SimpleType
          name=integer
      .init:
        Call
          .callee:
            Name
              name=makeAdder
          .args:
            LiteralInt
              value=5
      kind=let
    ClassDecl
      name=Animal
      base=None
      .fields:
        VarDecl
          name=name
          .type:
            SimpleType
              name=string
          init=None
          kind=let
      .methods:
        FunctionDecl
          name=constructor
          .params:
            Param
              name=name
              .type:
                SimpleType
                  name=string
          ret=None
          .body:
            Block
              .stmts:
                Assign
                  .target:
                    Member
                      .obj:
                        Name
                          name=this
                      name=name
                  .value:
                    Name
                      name=name
          is_method=True
          is_constructor=True
        FunctionDecl
          name=speak
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Member
                          .obj:
                            Name
                              name=this
                          name=name
                      .right:
                        LiteralString
                          value= makes a sound.
          is_method=True
          is_constructor=False
    ClassDecl
      name=Dog
      base=Animal
      .fields:
      .methods:
        FunctionDecl
          name=speak
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Member
                          .obj:
                            Name
                              name=this
                          name=name
                      .right:
                        LiteralString
                          value= barks.
          is_method=True
          is_constructor=False
    VarDecl
      name=dog
      .type:
        SimpleType
          name=Dog
      .init:
        New
          class_name=Dog
          .args:
            LiteralString
              value=Rex
      kind=let
    VarDecl
      name=first
      .type:
        SimpleType
          name=integer
      .init:
        Index
          .arr:
            Name
              name=numbers
          .index:
            LiteralInt
              value=0
      kind=let
    FunctionDecl
      name=getMultiples
      .params:
        Param
          name=n
          .type:
            SimpleType
              name=integer
      ret=None
      .body:
        Block
          .stmts:
            VarDecl
              name=result
              type=None
              .init:
                ArrayLiteral
                  .elems:
                    Binary
                      op=*
                      .left:
                        Name
                          name=n
                      .right:
                        LiteralInt
                          value=1
                    Binary
                      op=*
                      .left:
                        Name
                          name=n
                      .right:
                        LiteralInt
                          value=2
                    Binary
                      op=*
                      .left:
                        Name
                          name=n
                      .right:
                        LiteralInt
                          value=3
                    Binary
                      op=*
                      .left:
                        Name
                          name=n
                      .right:
                        LiteralInt
                          value=4
                    Binary
                      op=*
                      .left:
                        Name
                          name=n
                      .right:
                        LiteralInt
                          value=5
              kind=let
            Return
              .expr:
                Name
                  name=result
      is_method=False
      is_constructor=False
    VarDecl
      name=multiples
      type=None
      .init:
        Call
          .callee:
            Name
              name=getMultiples
          .args:
            LiteralInt
              value=2
      kind=let
    FunctionDecl
      name=factorial
      .params:
        Param
          name=n
          .type:
            SimpleType
              name=integer
      .ret:
        SimpleType
          name=integer
      .body:
        Block
          .stmts:
            If
              .cond:
                LiteralInt
                  value=1
              .then:
                Block
                  .stmts:
                    Return
                      .expr:
                        LiteralInt
                          value=1
              else_=None
            Return
              .expr:
                Binary
                  op=*
                  .left:
                    Name
                      name=n
                  .right:
                    Call
                      .callee:
                        Name
                          name=factorial
                      .args:
                        Binary
                          op=-
                          .left:
                            Name
                              name=n
                          .right:
                            LiteralInt
                              value=1
      is_method=False
      is_constructor=False
    VarDecl
      name=a
      .type:
        SimpleType
          name=integer
      .init:
        Binary
          op=+
          .left:
            LiteralInt
              value=2
          .right:
            Binary
              op=*
              .left:
                LiteralInt
                  value=3
              .right:
                LiteralInt
                  value=4
      kind=let
    VarDecl
      name=bnum
      type=None
      .init:
        Binary
          op=-
          .left:
            LiteralInt
              value=10
          .right:
            Binary
              op=/
              .left:
                Name
                  name=a
              .right:
                LiteralInt
                  value=2
      kind=let
    VarDecl
      name=c
      .type:
        SimpleType
          name=boolean
      .init:
        Binary
          op=&&
          .left:
            LiteralBool
              value=True
          .right:
            Unary
              op=!
              .expr:
                LiteralBool
                  value=False
      kind=let
    VarDecl
      name=d
      .type:
        SimpleType
          name=boolean
      .init:
        LiteralInt
          value=8
      kind=let
    VarDecl
      name=e
      .type:
        SimpleType
          name=boolean
      .init:
        Name
          name=bnum
      kind=let
    VarDecl
      name=x
      type=None
      init=None
      kind=let
    VarDecl
      name=K
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=7
      kind=const
    VarDecl
      name=v
      type=None
      .init:
        ArrayLiteral
          .elems:
            LiteralInt
              value=1
            LiteralInt
              value=2
            LiteralInt
              value=3
      kind=let
    VarDecl
      name=y
      type=None
      .init:
        Index
          .arr:
            Name
              name=v
          .index:
            LiteralInt
              value=0
      kind=let
    VarDecl
      name=s
      .type:
        SimpleType
          name=string
      .init:
        Binary
          op=+
          .left:
            LiteralString
              value=num: 
          .right:
            Name
              name=a
      kind=let
    FunctionDecl
      name=f
      .params:
      .ret:
        SimpleType
          name=integer
      .body:
        Block
          .stmts:
            Return
              .expr:
                LiteralInt
                  value=1
      is_method=False
      is_constructor=False
    ClassDecl
      name=A
      base=None
      .fields:
        VarDecl
          name=name
          .type:
            SimpleType
              name=string
          init=None
          kind=let
      .methods:
        FunctionDecl
          name=constructor
          .params:
            Param
              name=name
              .type:
                SimpleType
                  name=string
          ret=None
          .body:
            Block
              .stmts:
                Assign
                  .target:
                    Member
                      .obj:
                        Name
                          name=this
                      name=name
                  .value:
                    Name
                      name=name
          is_method=True
          is_constructor=True
        FunctionDecl
          name=speak
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Member
                          .obj:
                            Name
                              name=this
                          name=name
                      .right:
                        LiteralString
                          value= habla
          is_method=True
          is_constructor=False
    ClassDecl
      name=B
      base=A
      .fields:
      .methods:
        FunctionDecl
          name=shout
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Member
                          .obj:
                            Name
                              name=this
                          name=name
                      .right:
                        LiteralString
                          value=!!!
          is_method=True
          is_constructor=False
    VarDecl
      name=b
      .type:
        SimpleType
          name=B
      .init:
        New
          class_name=B
          .args:
            LiteralString
              value=Rex
      kind=let
    ClassDecl
      name=A2
      base=None
      .fields:
      .methods:
        FunctionDecl
          name=constructor
          .params:
            Param
              name=x
              .type:
                SimpleType
                  name=integer
          ret=None
          .body:
            Block
              .stmts:
          is_method=True
          is_constructor=True
    ClassDecl
      name=B2
      base=A2
      .fields:
      .methods:
    ClassDecl
      name=A3
      base=None
      .fields:
      .methods:
        FunctionDecl
          name=constructor
          .params:
            Param
              name=name
              .type:
                SimpleType
                  name=string
          ret=None
          .body:
            Block
              .stmts:
          is_method=True
          is_constructor=True
    ClassDecl
      name=B3
      base=A3
      .fields:
      .methods:
    ClassDecl
      name=A4
      base=None
      .fields:
        VarDecl
          name=ok
          .type:
            SimpleType
              name=integer
          init=None
          kind=let
      .methods:
        FunctionDecl
          name=constructor
          .params:
          ret=None
          .body:
            Block
              .stmts:
                Assign
                  .target:
                    Member
                      .obj:
                        Name
                          name=this
                      name=ok
                  .value:
                    LiteralInt
                      value=1
          is_method=True
          is_constructor=True
    ClassDecl
      name=B4
      base=A4
      .fields:
      .methods:
    VarDecl
      name=b4
      .type:
        SimpleType
          name=B4
      .init:
        New
          class_name=B4
          .args:
      kind=let
    ClassDecl
      name=A5
      base=None
      .fields:
      .methods:
        FunctionDecl
          name=constructor
          .params:
          ret=None
          .body:
            Block
              .stmts:
          is_method=True
          is_constructor=True
    ClassDecl
      name=B5
      base=A5
      .fields:
      .methods:
    VarDecl
      name=b5
      .type:
        SimpleType
          name=B5
      .init:
        New
          class_name=B5
          .args:
      kind=let
    ClassDecl
      name=A6
      base=None
      .fields:
      .methods:
        FunctionDecl
          name=constructor
          .params:
          ret=None
          .body:
            Block
              .stmts:
          is_method=True
          is_constructor=True
        FunctionDecl
          name=ping
          .params:
          .ret:
            SimpleType
              name=integer
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    LiteralInt
                      value=1
          is_method=True
          is_constructor=False
    ClassDecl
      name=B6
      base=A6
      .fields:
      .methods:
    VarDecl
      name=b6
      .type:
        SimpleType
          name=B6
      .init:
        New
          class_name=B6
          .args:
      kind=let
    ClassDecl
      name=A7
      base=None
      .fields:
      .methods:
        FunctionDecl
          name=constructor
          .params:
          ret=None
          .body:
            Block
              .stmts:
          is_method=True
          is_constructor=True
        FunctionDecl
          name=dup
          .params:
            Param
              name=n
              .type:
                SimpleType
                  name=integer
          .ret:
            SimpleType
              name=integer
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Name
                          name=n
                      .right:
                        Name
                          name=n
          is_method=True
          is_constructor=False
    ClassDecl
      name=B7
      base=A7
      .fields:
      .methods:
    VarDecl
      name=b7
      .type:
        SimpleType
          name=B7
      .init:
        New
          class_name=B7
          .args:
      kind=let
    VarDecl
      name=notObj
      .type:
        SimpleType
          name=integer
      .init:
        Binary
          op=+
          .left:
            LiteralInt
              value=1
          .right:
            LiteralInt
              value=2
      kind=let
    VarDecl
      name=arr
      type=None
      .init:
        ArrayLiteral
          .elems:
            LiteralInt
              value=1
            LiteralInt
              value=2
            LiteralInt
              value=3
      kind=let
    VarDecl
      name=notArr
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=123
      kind=let
    FunctionDecl
      name=calcularDescuento
      .params:
        Param
          name=total
          .type:
            SimpleType
              name=integer
      .ret:
        SimpleType
          name=integer
      .body:
        Block
          .stmts:
            If
              .cond:
                LiteralInt
                  value=100
              .then:
                Block
                  .stmts:
                    Return
                      .expr:
                        LiteralInt
                          value=10
              else_=None
            Return
              .expr:
                LiteralInt
                  value=0
      is_method=False
      is_constructor=False
    VarDecl
      name=subtotalCompra
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=150
      kind=let
    VarDecl
      name=descuentoAplicado
      .type:
        SimpleType
          name=integer
      .init:
        Call
          .callee:
            Name
              name=calcularDescuento
          .args:
            Name
              name=subtotalCompra
      kind=let
    ClassDecl
      name=Factura
      base=None
      .fields:
        VarDecl
          name=cliente
          .type:
            SimpleType
              name=string
          init=None
          kind=let
        VarDecl
          name=monto
          .type:
            SimpleType
              name=integer
          init=None
          kind=let
      .methods:
        FunctionDecl
          name=constructor
          .params:
            Param
              name=cliente
              .type:
                SimpleType
                  name=string
            Param
              name=monto
              .type:
                SimpleType
                  name=integer
          ret=None
          .body:
            Block
              .stmts:
                Assign
                  .target:
                    Member
                      .obj:
                        Name
                          name=this
                      name=cliente
                  .value:
                    Name
                      name=cliente
                Assign
                  .target:
                    Member
                      .obj:
                        Name
                          name=this
                      name=monto
                  .value:
                    Name
                      name=monto
          is_method=True
          is_constructor=True
        FunctionDecl
          name=resumen
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Binary
                          op=+
                          .left:
                            Binary
                              op=+
                              .left:
                                LiteralString
                                  value=Cliente 
                              .right:
                                Member
                                  .obj:
                                    Name
                                      name=this
                                  name=cliente
                          .right:
                            LiteralString
                              value=, monto 
                      .right:
                        Member
                          .obj:
                            Name
                              name=this
                          name=monto
          is_method=True
          is_constructor=False
    VarDecl
      name=fac
      .type:
        SimpleType
          name=Factura
      .init:
        New
          class_name=Factura
          .args:
            LiteralString
              value=ACME S.A.
            LiteralInt
              value=250
      kind=let
    VarDecl
      name=empleados
      type=None
      .init:
        ArrayLiteral
          .elems:
            LiteralString
              value=Ana
            LiteralString
              value=Luis
            LiteralString
              value=María
      kind=let
    ClassDecl
      name=Vehiculo
      base=None
      .fields:
        VarDecl
          name=marca
          .type:
            SimpleType
              name=string
          init=None
          kind=let
      .methods:
        FunctionDecl
          name=constructor
          .params:
            Param
              name=marca
              .type:
                SimpleType
                  name=string
          ret=None
          .body:
            Block
              .stmts:
                Assign
                  .target:
                    Member
                      .obj:
                        Name
                          name=this
                      name=marca
                  .value:
                    Name
                      name=marca
          is_method=True
          is_constructor=True
        FunctionDecl
          name=etiqueta
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        LiteralString
                          value=Vehiculo 
                      .right:
                        Member
                          .obj:
                            Name
                              name=this
                          name=marca
          is_method=True
          is_constructor=False
    ClassDecl
      name=Moto
      base=Vehiculo
      .fields:
      .methods:
        FunctionDecl
          name=rodar
          .params:
          .ret:
            SimpleType
              name=string
          .body:
            Block
              .stmts:
                Return
                  .expr:
                    Binary
                      op=+
                      .left:
                        Member
                          .obj:
                            Name
                              name=this
                          name=marca
                      .right:
                        LiteralString
                          value= en marcha
          is_method=True
          is_constructor=False
    VarDecl
      name=m
      .type:
        SimpleType
          name=Moto
      .init:
        New
          class_name=Moto
          .args:
            LiteralString
              value=Yamaha
      kind=let
    VarDecl
      name=umbral
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=50
      kind=let
    VarDecl
      name=estado
      .type:
        SimpleType
          name=string
      .init:
        Ternary
          .cond:
            Name
              name=umbral
          .then:
            LiteralString
              value=APROBADO
          .otherwise:
            LiteralString
              value=PENDIENTE
      kind=let
    VarDecl
      name=test
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=2
      kind=let
    VarDecl
      name=gv
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=10
      kind=var
    VarDecl
      name=G
      .type:
        SimpleType
          name=integer
      .init:
        LiteralInt
          value=1
      kind=const
    FunctionDecl
      name=outer
      .params:
        Param
          name=a
          .type:
            SimpleType
              name=integer
      .ret:
        SimpleType
          name=void
      .body:
        Block
          .stmts:
            VarDecl
              name=x
              .type:
                SimpleType
                  name=integer
              .init:
                LiteralInt
                  value=1
              kind=var
            VarDecl
              name=c
              .type:
                SimpleType
                  name=integer
              .init:
                LiteralInt
                  value=5
              kind=const
            FunctionDecl
              name=inner1
              .params:
                Param
                  name=b
                  .type:
                    SimpleType
                      name=integer
              .ret:
                SimpleType
                  name=void
              .body:
                Block
                  .stmts:
                    Assign
                      .target:
                        Name
                          name=gv
                      .value:
                        Binary
                          op=+
                          .left:
                            Name
                              name=gv
                          .right:
                            LiteralInt
                              value=1
              is_method=False
              is_constructor=False
            FunctionDecl
              name=inner2
              .params:
              .ret:
                SimpleType
                  name=void
              .body:
                Block
                  .stmts:
                    Assign
                      .target:
                        Name
                          name=x
                      .value:
                        Binary
                          op=+
                          .left:
                            Name
                              name=x
                          .right:
                            LiteralInt
                              value=1
              is_method=False
              is_constructor=False
            FunctionDecl
              name=inner3
              .params:
              .ret:
                SimpleType
                  name=void
              .body:
                Block
                  .stmts:
                    VarDecl
                      name=x
                      .type:
                        SimpleType
                          name=integer
                      .init:
                        LiteralInt
                          value=0
                      kind=var
              is_method=False
              is_constructor=False
            ExprStmt
              .expr:
                Call
                  .callee:
                    Name
                      name=inner1
                  .args:
                    LiteralInt
                      value=10
            ExprStmt
              .expr:
                Call
                  .callee:
                    Name
                      name=inner2
                  .args:
            ExprStmt
              .expr:
                Call
                  .callee:
                    Name
                      name=inner3
                  .args:
      is_method=False
      is_constructor=False
    FunctionDecl
      name=level1
      .params:
      .ret:
        SimpleType
          name=void
      .body:
        Block
          .stmts:
            VarDecl
              name=a
              .type:
                SimpleType
                  name=integer
              .init:
                LiteralInt
                  value=1
              kind=var
            FunctionDecl
              name=level2
              .params:
              .ret:
                SimpleType
                  name=void
              .body:
                Block
                  .stmts:
                    VarDecl
                      name=b
                      .type:
                        SimpleType
                          name=integer
                      .init:
                        LiteralInt
                          value=2
                      kind=var
                    FunctionDecl
                      name=level3
                      .params:
                      .ret:
                        SimpleType
                          name=void
                      .body:
                        Block
                          .stmts:
                      is_method=False
                      is_constructor=False
                    ExprStmt
                      .expr:
                        Call
                          .callee:
                            Name
                              name=level3
                          .args:
              is_method=False
              is_constructor=False
            ExprStmt
              .expr:
                Call
                  .callee:
                    Name
                      name=level2
                  .args:
      is_method=False
      is_constructor=False
    FunctionDecl
      name=deadasd
      .params:
      .ret:
        SimpleType
          name=integer
      .body:
        Block
          .stmts:
            If
              .cond:
                LiteralBool
                  value=True
              .then:
                Block
                  .stmts:
                    Return
                      .expr:
                        LiteralInt
                          value=1
              else_=None
      is_method=False
      is_constructor=False