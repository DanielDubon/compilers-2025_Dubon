program
  statement
    functionDeclaration
      TOKEN(function)
      TOKEN(suma)
      TOKEN(()
      parameters
        parameter
          TOKEN(a)
          TOKEN(:)
          type
            baseType
              TOKEN(integer)
        TOKEN(,)
        parameter
          TOKEN(b)
          TOKEN(:)
          type
            baseType
              TOKEN(integer)
      TOKEN())
      TOKEN(:)
      type
        baseType
          TOKEN(integer)
      block
        TOKEN({)
        statement
          returnStatement
            TOKEN(return)
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(a)
                            TOKEN(+)
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(b)
            TOKEN(;)
        TOKEN(})
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(resultado)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              leftHandSide
                                primaryAtom
                                  TOKEN(suma)
                                suffixOp
                                  TOKEN(()
                                  arguments
                                    expression
                                      assignmentExpr
                                        conditionalExpr
                                          logicalOrExpr
                                            logicalAndExpr
                                              equalityExpr
                                                relationalExpr
                                                  additiveExpr
                                                    multiplicativeExpr
                                                      unaryExpr
                                                        primaryExpr
                                                          literalExpr
                                                            TOKEN(5)
                                    TOKEN(,)
                                    expression
                                      assignmentExpr
                                        conditionalExpr
                                          logicalOrExpr
                                            logicalAndExpr
                                              equalityExpr
                                                relationalExpr
                                                  additiveExpr
                                                    multiplicativeExpr
                                                      unaryExpr
                                                        primaryExpr
                                                          literalExpr
                                                            TOKEN(7)
                                  TOKEN())
      TOKEN(;)
  statement
    ifStatement
      TOKEN(if)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(resultado)
                    TOKEN(>)
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN(10)
      TOKEN())
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("Mayor que 10")
            TOKEN())
            TOKEN(;)
        TOKEN(})
      TOKEN(else)
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("Menor o igual a 10")
            TOKEN())
            TOKEN(;)
        TOKEN(})
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(i)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(0)
      TOKEN(;)
  statement
    whileStatement
      TOKEN(while)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(i)
                    TOKEN(<)
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN(3)
      TOKEN())
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(i)
            TOKEN())
            TOKEN(;)
        statement
          assignment
            TOKEN(i)
            TOKEN(=)
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(i)
                            TOKEN(+)
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN(1)
            TOKEN(;)
        TOKEN(})
  TOKEN(<EOF>)
