 * Serving Flask app 'server'
 * Debug mode: off
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://172.30.14.14:5000
Press CTRL+C to quit
127.0.0.1 - - [01/Oct/2025 20:17:55] "OPTIONS /compile HTTP/1.1" 200 -

--- Parse Tree Generado ---
program
  statement
    constantDeclaration
      TOKEN(const)
      TOKEN(MAX_VALUE)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(100)
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(globalCounter)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(0)
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(message)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(string)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN("Hello from global!")
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(isActive)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(boolean)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(true)
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(emptyVar)
      TOKEN(;)
  statement
    functionDeclaration
      TOKEN(function)
      TOKEN(calculateSum)
      TOKEN(()
      parameters
        parameter
          TOKEN(a)
          TOKEN(:)
          type
            baseType
              TOKEN(integer)
        TOKEN(,)
        parameter
          TOKEN(b)
          TOKEN(:)
          type
            baseType
              TOKEN(integer)
      TOKEN())
      TOKEN(:)
      type
        baseType
          TOKEN(integer)
      block
        TOKEN({)
        statement
          variableDeclaration
            TOKEN(let)
            TOKEN(localResult)
            typeAnnotation
              TOKEN(:)
              type
                baseType
                  TOKEN(integer)
            initializer
              TOKEN(=)
              expression
                assignmentExpr
                  conditionalExpr
                    logicalOrExpr
                      logicalAndExpr
                        equalityExpr
                          relationalExpr
                            additiveExpr
                              multiplicativeExpr
                                unaryExpr
                                  primaryExpr
                                    leftHandSide
                                      primaryAtom
                                        TOKEN(a)
                              TOKEN(+)
                              multiplicativeExpr
                                unaryExpr
                                  primaryExpr
                                    leftHandSide
                                      primaryAtom
                                        TOKEN(b)
            TOKEN(;)
        statement
          returnStatement
            TOKEN(return)
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(localResult)
            TOKEN(;)
        TOKEN(})
  statement
    functionDeclaration
      TOKEN(function)
      TOKEN(countdown)
      TOKEN(()
      parameters
        parameter
          TOKEN(start)
          TOKEN(:)
          type
            baseType
              TOKEN(integer)
      TOKEN())
      TOKEN(:)
      type
        baseType
          TOKEN(void)
      block
        TOKEN({)
        statement
          variableDeclaration
            TOKEN(let)
            TOKEN(current)
            typeAnnotation
              TOKEN(:)
              type
                baseType
                  TOKEN(integer)
            initializer
              TOKEN(=)
              expression
                assignmentExpr
                  conditionalExpr
                    logicalOrExpr
                      logicalAndExpr
                        equalityExpr
                          relationalExpr
                            additiveExpr
                              multiplicativeExpr
                                unaryExpr
                                  primaryExpr
                                    leftHandSide
                                      primaryAtom
                                        TOKEN(start)
            TOKEN(;)
        statement
          whileStatement
            TOKEN(while)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(current)
                          TOKEN(>)
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN(0)
            TOKEN())
            block
              TOKEN({)
              statement
                printStatement
                  TOKEN(print)
                  TOKEN(()
                  expression
                    assignmentExpr
                      conditionalExpr
                        logicalOrExpr
                          logicalAndExpr
                            equalityExpr
                              relationalExpr
                                additiveExpr
                                  multiplicativeExpr
                                    unaryExpr
                                      primaryExpr
                                        literalExpr
                                          TOKEN("Counting down: ")
                                  TOKEN(+)
                                  multiplicativeExpr
                                    unaryExpr
                                      primaryExpr
                                        leftHandSide
                                          primaryAtom
                                            TOKEN(current)
                  TOKEN())
                  TOKEN(;)
              statement
                assignment
                  TOKEN(current)
                  TOKEN(=)
                  expression
                    assignmentExpr
                      conditionalExpr
                        logicalOrExpr
                          logicalAndExpr
                            equalityExpr
                              relationalExpr
                                additiveExpr
                                  multiplicativeExpr
                                    unaryExpr
                                      primaryExpr
                                        leftHandSide
                                          primaryAtom
                                            TOKEN(current)
                                  TOKEN(-)
                                  multiplicativeExpr
                                    unaryExpr
                                      primaryExpr
                                        literalExpr
                                          TOKEN(1)
                  TOKEN(;)
              TOKEN(})
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("Countdown finished!")
            TOKEN())
            TOKEN(;)
        TOKEN(})
  statement
    printStatement
      TOKEN(print)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(message)
      TOKEN())
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(x)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(5)
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(y)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(10)
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(z)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              TOKEN(()
                              expression
                                assignmentExpr
                                  conditionalExpr
                                    logicalOrExpr
                                      logicalAndExpr
                                        equalityExpr
                                          relationalExpr
                                            additiveExpr
                                              multiplicativeExpr
                                                unaryExpr
                                                  primaryExpr
                                                    leftHandSide
                                                      primaryAtom
                                                        TOKEN(x)
                                              TOKEN(+)
                                              multiplicativeExpr
                                                unaryExpr
                                                  primaryExpr
                                                    leftHandSide
                                                      primaryAtom
                                                        TOKEN(y)
                              TOKEN())
                          TOKEN(*)
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(2)
                        TOKEN(-)
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(3)
      TOKEN(;)
  statement
    printStatement
      TOKEN(print)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN("Result of z: ")
                      TOKEN(+)
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(z)
      TOKEN())
      TOKEN(;)
  statement
    ifStatement
      TOKEN(if)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(z)
                    TOKEN(>)
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN(20)
      TOKEN())
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("z is greater than 20.")
            TOKEN())
            TOKEN(;)
        statement
          variableDeclaration
            TOKEN(let)
            TOKEN(tempMsg)
            typeAnnotation
              TOKEN(:)
              type
                baseType
                  TOKEN(string)
            initializer
              TOKEN(=)
              expression
                assignmentExpr
                  conditionalExpr
                    logicalOrExpr
                      logicalAndExpr
                        equalityExpr
                          relationalExpr
                            additiveExpr
                              multiplicativeExpr
                                unaryExpr
                                  primaryExpr
                                    literalExpr
                                      TOKEN("Inside if block.")
            TOKEN(;)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(tempMsg)
            TOKEN())
            TOKEN(;)
        TOKEN(})
      TOKEN(else)
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("z is 20 or less.")
            TOKEN())
            TOKEN(;)
        TOKEN(})
  statement
    ifStatement
      TOKEN(if)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(isActive)
      TOKEN())
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("System is active.")
            TOKEN())
            TOKEN(;)
        TOKEN(})
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(loopVar)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(3)
      TOKEN(;)
  statement
    whileStatement
      TOKEN(while)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(loopVar)
                    TOKEN(>)
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN(0)
      TOKEN())
      block
        TOKEN({)
        statement
          printStatement
            TOKEN(print)
            TOKEN(()
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN("Loop iteration: ")
                            TOKEN(+)
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(loopVar)
            TOKEN())
            TOKEN(;)
        statement
          assignment
            TOKEN(loopVar)
            TOKEN(=)
            expression
              assignmentExpr
                conditionalExpr
                  logicalOrExpr
                    logicalAndExpr
                      equalityExpr
                        relationalExpr
                          additiveExpr
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  leftHandSide
                                    primaryAtom
                                      TOKEN(loopVar)
                            TOKEN(-)
                            multiplicativeExpr
                              unaryExpr
                                primaryExpr
                                  literalExpr
                                    TOKEN(1)
            TOKEN(;)
        TOKEN(})
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(sumResult)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(integer)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              leftHandSide
                                primaryAtom
                                  TOKEN(calculateSum)
                                suffixOp
                                  TOKEN(()
                                  arguments
                                    expression
                                      assignmentExpr
                                        conditionalExpr
                                          logicalOrExpr
                                            logicalAndExpr
                                              equalityExpr
                                                relationalExpr
                                                  additiveExpr
                                                    multiplicativeExpr
                                                      unaryExpr
                                                        primaryExpr
                                                          leftHandSide
                                                            primaryAtom
                                                              TOKEN(x)
                                    TOKEN(,)
                                    expression
                                      assignmentExpr
                                        conditionalExpr
                                          logicalOrExpr
                                            logicalAndExpr
                                              equalityExpr
                                                relationalExpr
                                                  additiveExpr
                                                    multiplicativeExpr
                                                      unaryExpr
                                                        primaryExpr
                                                          leftHandSide
                                                            primaryAtom
                                                              TOKEN(y)
                                  TOKEN())
      TOKEN(;)
  statement
    printStatement
      TOKEN(print)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN("Sum result: ")
                      TOKEN(+)
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(sumResult)
      TOKEN())
      TOKEN(;)
  statement
    expressionStatement
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            leftHandSide
                              primaryAtom
                                TOKEN(countdown)
                              suffixOp
                                TOKEN(()
                                arguments
                                  expression
                                    assignmentExpr
                                      conditionalExpr
                                        logicalOrExpr
                                          logicalAndExpr
                                            equalityExpr
                                              relationalExpr
                                                additiveExpr
                                                  multiplicativeExpr
                                                    unaryExpr
                                                      primaryExpr
                                                        literalExpr
                                                          TOKEN(2)
                                TOKEN())
      TOKEN(;)
  statement
    variableDeclaration
      TOKEN(let)
      TOKEN(myNull)
      typeAnnotation
        TOKEN(:)
        type
          baseType
            TOKEN(null)
      initializer
        TOKEN(=)
        expression
          assignmentExpr
            conditionalExpr
              logicalOrExpr
                logicalAndExpr
                  equalityExpr
                    relationalExpr
                      additiveExpr
                        multiplicativeExpr
                          unaryExpr
                            primaryExpr
                              literalExpr
                                TOKEN(null)
      TOKEN(;)
  statement
    printStatement
      TOKEN(print)
      TOKEN(()
      expression
        assignmentExpr
          conditionalExpr
            logicalOrExpr
              logicalAndExpr
                equalityExpr
                  relationalExpr
                    additiveExpr
                      multiplicativeExpr
                        unaryExpr
                          primaryExpr
                            literalExpr
                              TOKEN("Program finished.")
      TOKEN())
      TOKEN(;)
  TOKEN(<EOF>)
127.0.0.1 - - [01/Oct/2025 20:17:55] "POST /compile HTTP/1.1" 200 -

---------------------------

[DEBUG AstBuilder] Entering visitVariableDeclaration for globalCounter
[DEBUG AstBuilder] visitVariableDeclaration returning <class 'ast_nodes.VarDecl'>: globalCounter
[DEBUG AstBuilder] Entering visitVariableDeclaration for message
[DEBUG AstBuilder] visitVariableDeclaration returning <class 'ast_nodes.VarDecl'>: message
[DEBUG AstBuilder] Entering visitVariableDeclaration for isActive
[DEBUG AstBuilder] visitVariableDeclaration returning <class 'ast_nodes.VarDecl'>: isActive
[DEBUG AstBuilder] Entering visitVariableDeclaration for emptyVar
[DEBUG AstBuilder] visitVariableDeclaration returning <class 'ast_nodes.VarDecl'>: emptyVar
[DEBUG AstBuilder] Entering visitVariableDeclaration for localResult
[DEBUG AstBuilder] visitVariableDeclaration returning <class 'ast_nodes.VarDecl'>: localResult
[DEBUG AstBuilder] Entering visitVariableDeclaration for current
[DEBUG AstBuilder] visitVariableDeclaration returning <class 'ast_nodes.VarDecl'>: current
